# .github/workflows/build.yml - Version corrig√©e pour slashsum
name: Build Slashsum Multi-Platform

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Test et build de base
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # cargo clippy -- -D warnings
    - name: Run tests
      run: |
        cargo test

        cargo fmt -- --check

    - name: Build and test binary
      run: |
        make build
        echo "=== Binary info ==="
        ls -la target/release/slashsum
        file target/release/slashsum

        echo "=== Version test ==="
        ./target/release/slashsum --version

        echo "=== Functional test ==="
        echo "Hello World" > test.txt
        ./target/release/slashsum test.txt
        rm test.txt

  # Build Linux
  build-linux:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build Linux binary
      run: |
        make build
        cp target/release/slashsum slashsum-linux-amd64

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: slashsum-linux
        path: slashsum-linux-amd64

  # Build Windows
  build-windows:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-gnu

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-x86-64

    - name: Build Windows binary
      run: |
        export CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc
        export CXX_x86_64_pc_windows_gnu=x86_64-w64-mingw32-g++
        export AR_x86_64_pc_windows_gnu=x86_64-w64-mingw32-ar
        export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc

        cargo build --release --target x86_64-pc-windows-gnu
        cp target/x86_64-pc-windows-gnu/release/slashsum.exe slashsum-windows-amd64.exe

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: slashsum-windows
        path: slashsum-windows-amd64.exe

  # Build macOS
  build-macos:
    runs-on: macos-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build macOS binary
      run: |
        make build
        cp target/release/slashsum slashsum-darwin-amd64

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: slashsum-macos
        path: slashsum-darwin-amd64

  # Build Snap
  build-snap:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Build Snap
      uses: snapcore/action-build@v1
      id: build-snap

    - name: Rename snap file
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        mv *.snap slashsum_${TAG_NAME}_amd64.snap

    - name: Upload Snap artifact
      uses: actions/upload-artifact@v4
      with:
        name: slashsum-snap
        path: slashsum_*.snap

  # Build DEB package
  build-deb:
    runs-on: ubuntu-latest
    needs: build-linux
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: slashsum-linux

    - name: Install nfpm
      run: |
        wget https://github.com/goreleaser/nfpm/releases/download/v2.43.0/nfpm_2.43.0_amd64.deb
        sudo dpkg -i nfpm_2.43.0_amd64.deb

    - name: Build DEB package
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_NAME#v}

        # Cr√©er la structure de r√©pertoires
        mkdir -p target/release
        cp slashsum-linux-amd64 target/release/slashsum
        chmod +x target/release/slashsum

        cat > nfpm.yaml << EOF
        name: "slashsum"
        arch: "amd64"
        platform: "linux"
        version: "${VERSION}"
        section: "utils"
        priority: "optional"
        maintainer: "Nicolas DEOUX <NDXDev@gmail.com>"
        description: |
          Calculate multiple checksums simultaneously
          Fast tool for calculating CRC32, MD5, SHA1, SHA256, and SHA512 checksums.
        vendor: "NDXDev"
        homepage: "https://github.com/NDXDeveloper/slashsum"
        license: "MIT"
        depends:
          - libc6
        contents:
          - src: "./target/release/slashsum"
            dst: "/usr/bin/slashsum"
            file_info:
              mode: 0755
          - src: "./README.md"
            dst: "/usr/share/doc/slashsum/README.md"
            file_info:
              mode: 0644
        EOF

        nfpm pkg --packager deb --config nfpm.yaml --target slashsum_${TAG_NAME}_amd64.deb
        ls -la *.deb

    - name: Upload DEB artifact
      uses: actions/upload-artifact@v4
      with:
        name: slashsum-deb
        path: slashsum_*.deb

  # Release finale (seulement pour les tags)
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-linux, build-windows, build-macos, build-snap, build-deb]
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare release files
      run: |
        # Organiser tous les fichiers
        find . -name "slashsum*" -type f | head -20

        # Cr√©er le dossier de release
        mkdir -p release

        # Copier tous les binaires et packages
        cp slashsum-linux/slashsum-linux-amd64 release/ 2>/dev/null || true
        cp slashsum-windows/slashsum-windows-amd64.exe release/ 2>/dev/null || true
        cp slashsum-macos/slashsum-darwin-amd64 release/ 2>/dev/null || true
        cp slashsum-snap/*.snap release/ 2>/dev/null || true
        cp slashsum-deb/*.deb release/ 2>/dev/null || true

        ls -la release/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        generate_release_notes: true
        body: |
          ## üöÄ Slashsum ${{ github.ref_name }}

          Calculate multiple checksums simultaneously with parallel processing.

          ### üì¶ Downloads

          - **Linux**: `slashsum-linux-amd64`
          - **Windows**: `slashsum-windows-amd64.exe`
          - **macOS**: `slashsum-darwin-amd64`
          - **Snap**: `slashsum_${{ github.ref_name }}_amd64.snap`
          - **DEB**: `slashsum_${{ github.ref_name }}_amd64.deb`

          ### üõ†Ô∏è Installation

          #### Ubuntu/Debian (DEB)
          ```bash
          wget https://github.com/NDXDeveloper/slashsum/releases/download/${{ github.ref_name }}/slashsum_${{ github.ref_name }}_amd64.deb
          sudo apt install ./slashsum_${{ github.ref_name }}_amd64.deb
          ```

          #### Linux (Snap)
          ```bash
          sudo snap install --dangerous slashsum_${{ github.ref_name }}_amd64.snap
          ```

          #### Manual installation
          ```bash
          # Download binary for your platform
          chmod +x slashsum-*
          sudo mv slashsum-* /usr/local/bin/slashsum
          ```

          ### ‚ú® Features
          - Algorithms: CRC32, MD5, SHA1, SHA256, SHA512
          - Parallel processing for optimal performance
          - Chunked reading for large files
          - Save results with `--save` option
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
